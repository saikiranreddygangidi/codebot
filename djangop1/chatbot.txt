from math import sqrt, ceil
import random
import itertools

fact = (1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880)

def factorial(n): return reduce(lambda x,y:x*y,range(1,n+1),1)

def is_perm(a,b): return sorted(str(a))==sorted(str(b))

def is_palindromic(n): n=str(n); return n==n[:: 1]

def is_pandigital(n, s=9): n=str(n); return len(n)==s and not '1234567890'[:s].strip(n).

Calculate the sum of proper divisors for n                                                  
def d(n):
    s = 1
    t = sqrt(n)
    for i in range(2, int(t)+1):
        if n % i == 0: s += i + n/i
    if t == int(t): s  = t    #correct s if t is a perfect square
    return s.

Create a list of all palindromic numbers with k digits                                      
def pal_list(k):
    if k == 1:
        return [1, 2, 3, 4, 5, 6, 7, 8, 9]
    return [sum([n*(10**i) for i,n in enumerate(([x]+list(ys)+[z]+list(ys)[:: 1]+[x]) if k%2
                                else ([x]+list(ys)+list(ys)[:: 1]+[x]))])
            for x in range(1,10)
            for ys in itertools.product(range(10), repeat=k/2 1)
            for z in (range(10) if k%2 else (None,))].


#sum of factorial's digits                                                                   
def sof_digits(n):
    if n==0: return 1
    s = 0
    while n > 0:
        s, n = s + fact[n % 10], n // 10
    return s.


find the nth Fibonacci number                                                               
def fibonacci(n):
    """
    Find the nth number in the Fibonacci series.  Example:
    
    >>>fibonacci(100)
    354224848179261915075

    Algorithm & Python source: Copyright (c) 2013 Nayuki Minase
    Fast doubling Fibonacci algorithm
    http://nayuki.eigenstate.org/page/fast fibonacci algorithms
    """
    if n < 0:
        raise ValueError("Negative arguments not implemented")
    return _fib(n)[0].

Returns a tuple (F(n), F(n+1))
def _fib(n):
    if n == 0:
        return (0, 1)
    else:
        a, b = _fib(n // 2)
        c = a * (2 * b   a)
        d = b * b + a * a
        if n % 2 == 0:
            return (c, d)
        else:
            return (d, c + d).


#sum of squares of digits                                                                   
def sos_digits(n):
    s = 0
    while n > 0:
        s, n = s + (n % 10)**2, n // 10
    return s

#    sum of the digits to a power e                                                             
def pow_digits(n, e):
    s = 0
    while n > 0:
        s, n = s + (n % 10)**e, n // 10
    return .



#    check n for prime                                                                          
def is_prime(n):
    if n <= 1: return False
    if n <= 3: return True
    if n%2==0 or n%3 == 0: return False
    r = int(sqrt(n))
    f = 5
    while f <= r:
        if n%f == 0 or n%(f+2) == 0: return False
        f+= 6
    return True.




#    Miller Rabin primality test                                                                
def miller_rabin(n):
    """
    Check n for primalty:  Example:

    >miller_rabin(162259276829213363391578010288127)    #Mersenne prime #11
    True

    Algorithm & Python source:
    http://en.literateprograms.org/Miller Rabin_primality_test_(Python)
    """
    d = n   1
    s = 0
    while d % 2 == 0:
        d >>= 1
        s += 1
    for repeat in range(20):
        a = 0
        while a == 0:
            a = random.randrange(n)
        if not miller_rabin_pass(a, s, d, n):
            return False
    return True

def miller_rabin_pass(a, s, d, n):
    a_to_power = pow(a, d, n)
    if a_to_power == 1:
        return True
    for i in range(s 1):
        if a_to_power == n   1:
            return True
        a_to_power = (a_to_power * a_to_power) % n
    return a_to_power == n   1.



#    factor a number into primes and frequency                                                    
"""
    find the prime factors of n along with their frequencies. Example:

    >>> factor(786456)
    [(2,3), (3,3), (11,1), (331,1)]
    
    Source: Project Euler forums for problem #3
"""
def factor(n):
    f, factors, prime_gaps = 1, [], [2, 4, 2, 4, 6, 2, 6, 4]
    if n < 1:
        return []
    while True:
        for gap in ([1, 1, 2, 2, 4] if f < 11 else prime_gaps):
            f += gap
            if f * f > n:  # If f > sqrt(n)
                if n == 1:
                    return factors
                else:
                    return factors + [(n, 1)]
            if not n % f:
                e = 1
                n //= f
                while not n % f:
                    n //= f
                    e += 1
                factors.append((f, e)).


#    greatest common divisor                                                                      
def gcd(a, b):
    """
    Compute the greatest common divisor of a and b. Examples:
    
    >>> gcd(14, 15)    #co prime
    1
    >>> gcd(5*5, 3*5)
    5
    """
    if a < 0:  a =  a
    if b < 0:  b =  b
    if a == 0: return b
    while (b): a, b = b, a%b
    return a.




#    generate permutations                                                                       
def perm(n, s):
    """
    requires function factorial()
    Find the nth permutation of the string s. Example:

    >>>perm(30, 'abcde')
    bcade
    """
   if len(s)==1: return s
   q, r = divmod(n, factorial(len(s) 1))
   return s[q] + perm(r, s[:q] + s[q+1:]).




#    binomial coefficients                                                                       
def binomial(n, k):
    """
    Calculate C(n,k), the number of ways can k be chosen from n. Example:
    
    >>>binomial(30,12)
    86493225
    """
    nt = 1
    for t in range(min(k, n k)):
        nt = nt * (n t) // (t+1)
    return nt.


#    catalan number                                                                              
def catalan_number(n):
    """
    Calculate the nth Catalan number. Example:
    
    >>>catalan_number(10)
    16796
    """
    nm = dm = 1
    for k in range(2, n+1):
        nm, dm = (nm*(n+k), dm*k)
    return nm / dm.



#    generate prime numbers                                                                      
def prime_sieve(n):
    """
    Return a list of prime numbers from 2 to a prime < n. Very fast (n<10,000,000) in 0.4 sec.
    
    Example:
    >>>prime_sieve(25)
    [2, 3, 5, 7, 11, 13, 17, 19, 23]

    Algorithm & Python source: Robert William Hanks
    http://stackoverflow.com/questions/17773352/python sieve prime numbers
    """
    sieve = [True] * (n/2)
    for i in xrange(3,int(n**0.5)+1,2):
        if sieve[i/2]:
            sieve[i*i/2::i] = [False] * ((n i*i 1)/(2*i)+1)
    return [2] + [2*i+1 for i in xrange(1,n/2) if sieve[i]].


#    bezout coefficients                                                                          
def bezout(a,b):
    """
    BÃ©zout coefficients (u,v) of (a,b) as:

        a*u + b*v = gcd(a,b)

    Result is the tuple: (u, v, gcd(a,b)). Examples:

    >>> bezout(7*3, 15*3)
    ( 2, 1, 3)
    >>> bezout(24157817, 39088169)    #sequential Fibonacci numbers
    ( 14930352, 9227465, 1)

    Algorithm source: Pierre L. Douillet
    http://www.douillet.info/~douillet/working_papers/bezout/node2.html
    """
    u,   v,  s,  t = 1, 0, 0, 1
    while b !=0:
        q, r = divmod(a,b)
        a, b = b, r
        u, s = s, u   q*s
        v, t = t, v   q*t

    return (u, v, a).

#    number base conversion                                                                    
#source: http://interactivepython.org/runestone/static/pythonds/Recursion/pythondsConvertinganIntegertoaStringinAnyBase.html
def dec2base(n,base):
   convertString = "0123456789ABCDEF"
   if n < base:
      return convertString[n]
   else:
      return dec2base(n//base,base) + convertString[n%base].

#    number to words                                                                             
#this function copied from stackoverflow user: Developer, Oct 5 '13 at 3:45
def n2words(num,join=True):
    '''words = {} convert an integer number into words'''
    units = ['','One','Two','Three','Four','Five','Six','Seven','Eight','Nine']
    teens = ['','Eleven','Twelve','Thirteen','Fourteen','Fifteen','Sixteen', \
             'Seventeen','Eighteen','Nineteen']
    tens = ['','Ten','Twenty','Thirty','Forty','Fifty','Sixty','Seventy', \
            'Eighty','Ninety']
    thousands = ['','Thousand','Million','Billion','Trillion','Quadrillion', \
                 'Quintillion','Sextillion','Septillion','Octillion', \
                 'Nonillion','Decillion','Undecillion','Duodecillion', \
                 'Tredecillion','Quattuordecillion','Sexdecillion', \
                 'Septendecillion','Octodecillion','Novemdecillion', \
                 'Vigintillion']
    words = []
    if num==0: words.append('zero')
    else:
        numStr = '%d'%num
        numStrLen = len(numStr)
        groups = (numStrLen+2)/3
        numStr = numStr.zfill(groups*3)
        for i in range(0,groups*3,3):
            h,t,u = int(numStr[i]),int(numStr[i+1]),int(numStr[i+2])
            g = groups (i/3+1)
            if h>=1:
                words.append(units[h])
                words.append('Hundred')
            if t>1:
                words.append(tens[t])
                if u>=1: words.append(units[u])
            elif t==1:
                if u>=1: words.append(teens[u])
                else: words.append(tens[t])
            else:
                if u>=1: words.append(units[u])
            if (g>=1) and ((h+t+u)>0): words.append(thousands[g]+'')
    if join: return ' '.join(words)
    return words.
#Dijkstra's single source  
import sys 
  
class Graph(): 
  
    def __init__(self, vertices): 
        self.V = vertices 
        self.graph = [[0 for column in range(vertices)]  
                    for row in range(vertices)] 
  
    def printSolution(self, dist): 
        print "Vertex \tDistance from Source"
        for node in range(self.V): 
            print node, "\t", dist[node] 
  
    # A utility function to find the vertex with  
    # minimum distance value, from the set of vertices  
    # not yet included in shortest path tree 
    def minDistance(self, dist, sptSet): 
  
        # Initilaize minimum distance for next node 
        min = sys.maxint 
  
        # Search not nearest vertex not in the  
        # shortest path tree 
        for v in range(self.V): 
            if dist[v] < min and sptSet[v] == False: 
                min = dist[v] 
                min_index = v 
  
        return min_index 
  
    # Funtion that implements Dijkstra's single source  
    # shortest path algorithm for a graph represented  
    # using adjacency matrix representation 
    def dijkstra(self, src): 
  
        dist = [sys.maxint] * self.V 
        dist[src] = 0
        sptSet = [False] * self.V 
  
        for cout in range(self.V): 
  
            # Pick the minimum distance vertex from  
            # the set of vertices not yet processed.  
            # u is always equal to src in first iteration 
            u = self.minDistance(dist, sptSet) 
  
            # Put the minimum distance vertex in the  
            # shotest path tree 
            sptSet[u] = True
  
            # Update dist value of the adjacent vertices  
            # of the picked vertex only if the current  
            # distance is greater than new distance and 
            # the vertex in not in the shotest path tree 
            for v in range(self.V): 
                if self.graph[u][v] > 0 and sptSet[v] == False and \ 
                dist[v] > dist[u] + self.graph[u][v]: 
                        dist[v] = dist[u] + self.graph[u][v] 
  
        self.printSolution(dist) 
  
# Driver program 
g = Graph(9) 
g.graph = [[0, 4, 0, 0, 0, 0, 0, 8, 0], 
        [4, 0, 8, 0, 0, 0, 0, 11, 0], 
        [0, 8, 0, 7, 0, 4, 0, 0, 2], 
        [0, 0, 7, 0, 9, 14, 0, 0, 0], 
        [0, 0, 0, 9, 0, 10, 0, 0, 0], 
        [0, 0, 4, 14, 10, 0, 2, 0, 0], 
        [0, 0, 0, 0, 0, 2, 0, 1, 6], 
        [8, 11, 0, 0, 0, 0, 1, 0, 7], 
        [0, 0, 2, 0, 0, 0, 6, 7, 0] 
        ]; 
  
g.dijkstra(0).


#union of trees
class UnionFind{
	//1-based indexing
	int n, m;
	int *p, *z;
	public:
		UnionFind(int no){
			n = no;
			p = new int[n+10];
			z = new int[n+10];
			int i;
			Fo(i, 1, n+1) 
				p[i] = i, z[i] = 0;
		}
		//Returns 1 if u and v are in different regions
		//0 otherwise
		bool addEdge(int u, int v){
			u = get(u);
			v = get(v);
			if (u == v) return 0;
			if (z[u] < z[v]) p[u] = v;
			else if (z[u] > z[v]) p[v] = u;
			else p[u] = v, z[v]++;
			return 1;
		}
		
		int get(int v){
			if (v == p[v]) return v;
			return p[v] = get(p[v]);
		}
		int com(){
			int i;
			int ans = 0;
			Fo(i, 1, n+1) ans += p[i] == i;
			return ans;
		}
};.
# diameter of a tree and height of tree
 #include <stdlib.h>
#include <stdio.h>
struct node{
    int value;
    struct node *left;
    struct node *rigth;
};
int max=0;
struct node* createnode(int value)
{struct node *p;
     p=(struct node *)malloc(sizeof(struct node));
     p->value=value;
     p->rigth=NULL;
     p->left=NULL;
     return p;

}
void inorder(struct node *p){
    if(p!=NULL){
        inorder(p->left);

        printf("%d\n",p->value);
        inorder(p->rigth);
    }
}
int diameter(struct node *root)
{ int k=0;
    if(root->left==NULL && root->rigth==NULL)
    {
        return 0;
    }
    else
     if(root->left==NULL)
     {k=1+diameter(root->rigth);
       if(k>max)
        max=k;
         return k;
     }
     else if(root->rigth==NULL){
            k=1+diameter(root->left);
       if(k>max)
        max=k;
         return k;
         }
     else
        {k=1+diameter(root->left)+1+diameter(root->rigth);
           if(k>max)
             max=k;
            if(1+diameter(root->left)>1+diameter(root->rigth))
             return 1+diameter(root->left);
            else
             return 1+diameter(root->rigth);
        }

}
int heigth(struct node *root){
    if(root->left==NULL && root->rigth==NULL)
    {
        return 0;
    }
    else
     if(root->left==NULL)
         return 1+heigth(root->rigth);
     else if(root->rigth==NULL)
         return 1+heigth(root->left);
     else
        {
            if(1+heigth(root->left)>1+heigth(root->rigth))
             return 1+heigth(root->left);
            else
             return 1+heigth(root->rigth);
        }

}
struct node* createbst(struct node *root,int value)
{
    if(root==NULL)
     return createnode(value);
    if(value<=root->value)
        root->left=createbst(root->left,value);
    if(value>root->value)
     root->rigth=createbst(root->rigth,value);
return root;
}

int main()
{
   struct node *root=NULL;
   int n,i,a[]={14,10,8,7,9,13,11,12,15};
       for(i=0;i<9;i++)
        root=createbst(root,a[i]);

    inorder(root);
    printf("heigth of tree %d",heigth(root));
    diameter(root);
    printf("diameter of tree %d",max);
}.
#matrix
#include<iostream>
#include<vector>
using namespace std;
template<class T> class matrix
{	
	public:
		typedef T value_type;
	private:
		vector<vector<T> > M;
	public:
		matrix(){}
		
		matrix(int rSize,int cSize)
		{
			M.assign(rSize,vector<value_type>(cSize));	
		}
		void assign(int rSize,int cSize)
		{
			M.assign(rSize,vector<value_type>(cSize));	
		}
		
		vector<value_type>& operator[](int i)
		{
			return M[i];
		}
		
		int rowSize() const
		{
			return M.size();
		}
		int columnSize() const
		{
			if(M.size()==0)
				return 0;
			else
				return M[0].size();
		}
		matrix<value_type> operator *(matrix<value_type> B) //assumes matricces are multiplicable
		{
			matrix<value_type> &A=*this;
			matrix<value_type> temp(A.rowSize(),B.columnSize());
			
			for(int i=0;i<temp.rowSize();i++)
				for(int j=0;j<temp.columnSize();j++)
					for(int k=0;k<B.rowSize();k++)
						temp[i][j]+=A[i][k]*B[k][j];
			
			return temp;
		}
		
		matrix<value_type> operator %(value_type MOD)
		{
			matrix<value_type> temp(rowSize(),columnSize());
			for(int i=0;i<rowSize();i++)
				for(int j=0;j<columnSize();j++)
					temp[i][j]=M[i][j]%MOD;
			return temp;
		}
		void clear()
		{
			M.clear();
		}
		
		static matrix<value_type> identity(int i)
		{
			matrix<value_type> X;
			X.assign(i,i);
			for(int j=0;j<i;j++)
				X[j][j]=1;	
			return X;
		}
};
template<class T> T p(T &n,long long m,int MOD)
{
    if(m==0) 
		return matrix<long long>::identity(n.rowSize());
    
    T x=p(n,m/2,MOD);
    if(m%2==0) 
               return (x*x)%MOD;
    else
               return (((x*x)%MOD)*n)%MOD;
}
template<class T> void printMatrix(matrix<T> X)
{
	for(int i=0;i<X.rowSize();i++)
	{
		for(int j=0;j<X.columnSize();j++)
			cout<<X[i][j]<<" ";
		cout<<endl;
	}
	cout<<endl;
}
int main()
{
	matrix<long long> T(26,26);
	for(int i=0;i<T.rowSize();i++)
		for(int j=0;j<T.columnSize();j++)
			cin>>T[i][j];
	
	const int MOD = 1000000007;
	int t;
	cin>>t;
	while(t--){
		char endChar;
		long long length;
		cin>>endChar>>length;
		matrix<long long> solutionMatrix = p(T,length-1, MOD);
		long long solution = 0;
		for(int i=0;i<solutionMatrix.columnSize();i++)
			solution+=solutionMatrix[i][endChar-'a'];
		cout<<solution%MOD<<endl;
	}
}.